// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nekomeowww/insights-bot/ent/telegramchat"
)

// TelegramChat is the model entity for the TelegramChat schema.
type TelegramChat struct {
	config `json:"-"`
	// ID of the ent.
	// Telegram chat ID
	ID int64 `json:"id,omitempty"`
	// Telegram chat type (private, group, supergroup, channel)
	Type string `json:"type,omitempty"`
	// Title of the chat (for groups, supergroups and channels)
	Title string `json:"title,omitempty"`
	// Username of the chat
	Username string `json:"username,omitempty"`
	// True if the chat is a forum (supergroup)
	IsForum      bool `json:"is_forum,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramChat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramchat.FieldIsForum:
			values[i] = new(sql.NullBool)
		case telegramchat.FieldID:
			values[i] = new(sql.NullInt64)
		case telegramchat.FieldType, telegramchat.FieldTitle, telegramchat.FieldUsername:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramChat fields.
func (tc *TelegramChat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramchat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int64(value.Int64)
		case telegramchat.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tc.Type = value.String
			}
		case telegramchat.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tc.Title = value.String
			}
		case telegramchat.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				tc.Username = value.String
			}
		case telegramchat.FieldIsForum:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_forum", values[i])
			} else if value.Valid {
				tc.IsForum = value.Bool
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelegramChat.
// This includes values selected through modifiers, order, etc.
func (tc *TelegramChat) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// Update returns a builder for updating this TelegramChat.
// Note that you need to call TelegramChat.Unwrap() before calling this method if this TelegramChat
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TelegramChat) Update() *TelegramChatUpdateOne {
	return NewTelegramChatClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TelegramChat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TelegramChat) Unwrap() *TelegramChat {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramChat is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TelegramChat) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramChat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("type=")
	builder.WriteString(tc.Type)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(tc.Title)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(tc.Username)
	builder.WriteString(", ")
	builder.WriteString("is_forum=")
	builder.WriteString(fmt.Sprintf("%v", tc.IsForum))
	builder.WriteByte(')')
	return builder.String()
}

// TelegramChats is a parsable slice of TelegramChat.
type TelegramChats []*TelegramChat
