// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/telegramchat"
)

// TelegramChatCreate is the builder for creating a TelegramChat entity.
type TelegramChatCreate struct {
	config
	mutation *TelegramChatMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (tcc *TelegramChatCreate) SetType(s string) *TelegramChatCreate {
	tcc.mutation.SetType(s)
	return tcc
}

// SetTitle sets the "title" field.
func (tcc *TelegramChatCreate) SetTitle(s string) *TelegramChatCreate {
	tcc.mutation.SetTitle(s)
	return tcc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tcc *TelegramChatCreate) SetNillableTitle(s *string) *TelegramChatCreate {
	if s != nil {
		tcc.SetTitle(*s)
	}
	return tcc
}

// SetUsername sets the "username" field.
func (tcc *TelegramChatCreate) SetUsername(s string) *TelegramChatCreate {
	tcc.mutation.SetUsername(s)
	return tcc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tcc *TelegramChatCreate) SetNillableUsername(s *string) *TelegramChatCreate {
	if s != nil {
		tcc.SetUsername(*s)
	}
	return tcc
}

// SetIsForum sets the "is_forum" field.
func (tcc *TelegramChatCreate) SetIsForum(b bool) *TelegramChatCreate {
	tcc.mutation.SetIsForum(b)
	return tcc
}

// SetNillableIsForum sets the "is_forum" field if the given value is not nil.
func (tcc *TelegramChatCreate) SetNillableIsForum(b *bool) *TelegramChatCreate {
	if b != nil {
		tcc.SetIsForum(*b)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TelegramChatCreate) SetID(i int64) *TelegramChatCreate {
	tcc.mutation.SetID(i)
	return tcc
}

// Mutation returns the TelegramChatMutation object of the builder.
func (tcc *TelegramChatCreate) Mutation() *TelegramChatMutation {
	return tcc.mutation
}

// Save creates the TelegramChat in the database.
func (tcc *TelegramChatCreate) Save(ctx context.Context) (*TelegramChat, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TelegramChatCreate) SaveX(ctx context.Context) *TelegramChat {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TelegramChatCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TelegramChatCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TelegramChatCreate) defaults() {
	if _, ok := tcc.mutation.IsForum(); !ok {
		v := telegramchat.DefaultIsForum
		tcc.mutation.SetIsForum(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TelegramChatCreate) check() error {
	if _, ok := tcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TelegramChat.type"`)}
	}
	if _, ok := tcc.mutation.IsForum(); !ok {
		return &ValidationError{Name: "is_forum", err: errors.New(`ent: missing required field "TelegramChat.is_forum"`)}
	}
	return nil
}

func (tcc *TelegramChatCreate) sqlSave(ctx context.Context) (*TelegramChat, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TelegramChatCreate) createSpec() (*TelegramChat, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramChat{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(telegramchat.Table, sqlgraph.NewFieldSpec(telegramchat.FieldID, field.TypeInt64))
	)
	_spec.Schema = tcc.schemaConfig.TelegramChat
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.GetType(); ok {
		_spec.SetField(telegramchat.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tcc.mutation.Title(); ok {
		_spec.SetField(telegramchat.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tcc.mutation.Username(); ok {
		_spec.SetField(telegramchat.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := tcc.mutation.IsForum(); ok {
		_spec.SetField(telegramchat.FieldIsForum, field.TypeBool, value)
		_node.IsForum = value
	}
	return _node, _spec
}

// TelegramChatCreateBulk is the builder for creating many TelegramChat entities in bulk.
type TelegramChatCreateBulk struct {
	config
	err      error
	builders []*TelegramChatCreate
}

// Save creates the TelegramChat entities in the database.
func (tccb *TelegramChatCreateBulk) Save(ctx context.Context) ([]*TelegramChat, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TelegramChat, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramChatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TelegramChatCreateBulk) SaveX(ctx context.Context) []*TelegramChat {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TelegramChatCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TelegramChatCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
