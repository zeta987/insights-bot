// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchat"
)

// TelegramChatUpdate is the builder for updating TelegramChat entities.
type TelegramChatUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramChatMutation
}

// Where appends a list predicates to the TelegramChatUpdate builder.
func (tcu *TelegramChatUpdate) Where(ps ...predicate.TelegramChat) *TelegramChatUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetType sets the "type" field.
func (tcu *TelegramChatUpdate) SetType(s string) *TelegramChatUpdate {
	tcu.mutation.SetType(s)
	return tcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tcu *TelegramChatUpdate) SetNillableType(s *string) *TelegramChatUpdate {
	if s != nil {
		tcu.SetType(*s)
	}
	return tcu
}

// SetTitle sets the "title" field.
func (tcu *TelegramChatUpdate) SetTitle(s string) *TelegramChatUpdate {
	tcu.mutation.SetTitle(s)
	return tcu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tcu *TelegramChatUpdate) SetNillableTitle(s *string) *TelegramChatUpdate {
	if s != nil {
		tcu.SetTitle(*s)
	}
	return tcu
}

// ClearTitle clears the value of the "title" field.
func (tcu *TelegramChatUpdate) ClearTitle() *TelegramChatUpdate {
	tcu.mutation.ClearTitle()
	return tcu
}

// SetUsername sets the "username" field.
func (tcu *TelegramChatUpdate) SetUsername(s string) *TelegramChatUpdate {
	tcu.mutation.SetUsername(s)
	return tcu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tcu *TelegramChatUpdate) SetNillableUsername(s *string) *TelegramChatUpdate {
	if s != nil {
		tcu.SetUsername(*s)
	}
	return tcu
}

// ClearUsername clears the value of the "username" field.
func (tcu *TelegramChatUpdate) ClearUsername() *TelegramChatUpdate {
	tcu.mutation.ClearUsername()
	return tcu
}

// SetIsForum sets the "is_forum" field.
func (tcu *TelegramChatUpdate) SetIsForum(b bool) *TelegramChatUpdate {
	tcu.mutation.SetIsForum(b)
	return tcu
}

// SetNillableIsForum sets the "is_forum" field if the given value is not nil.
func (tcu *TelegramChatUpdate) SetNillableIsForum(b *bool) *TelegramChatUpdate {
	if b != nil {
		tcu.SetIsForum(*b)
	}
	return tcu
}

// Mutation returns the TelegramChatMutation object of the builder.
func (tcu *TelegramChatUpdate) Mutation() *TelegramChatMutation {
	return tcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TelegramChatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TelegramChatUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TelegramChatUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TelegramChatUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcu *TelegramChatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchat.Table, telegramchat.Columns, sqlgraph.NewFieldSpec(telegramchat.FieldID, field.TypeInt64))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.GetType(); ok {
		_spec.SetField(telegramchat.FieldType, field.TypeString, value)
	}
	if value, ok := tcu.mutation.Title(); ok {
		_spec.SetField(telegramchat.FieldTitle, field.TypeString, value)
	}
	if tcu.mutation.TitleCleared() {
		_spec.ClearField(telegramchat.FieldTitle, field.TypeString)
	}
	if value, ok := tcu.mutation.Username(); ok {
		_spec.SetField(telegramchat.FieldUsername, field.TypeString, value)
	}
	if tcu.mutation.UsernameCleared() {
		_spec.ClearField(telegramchat.FieldUsername, field.TypeString)
	}
	if value, ok := tcu.mutation.IsForum(); ok {
		_spec.SetField(telegramchat.FieldIsForum, field.TypeBool, value)
	}
	_spec.Node.Schema = tcu.schemaConfig.TelegramChat
	ctx = internal.NewSchemaConfigContext(ctx, tcu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TelegramChatUpdateOne is the builder for updating a single TelegramChat entity.
type TelegramChatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramChatMutation
}

// SetType sets the "type" field.
func (tcuo *TelegramChatUpdateOne) SetType(s string) *TelegramChatUpdateOne {
	tcuo.mutation.SetType(s)
	return tcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tcuo *TelegramChatUpdateOne) SetNillableType(s *string) *TelegramChatUpdateOne {
	if s != nil {
		tcuo.SetType(*s)
	}
	return tcuo
}

// SetTitle sets the "title" field.
func (tcuo *TelegramChatUpdateOne) SetTitle(s string) *TelegramChatUpdateOne {
	tcuo.mutation.SetTitle(s)
	return tcuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tcuo *TelegramChatUpdateOne) SetNillableTitle(s *string) *TelegramChatUpdateOne {
	if s != nil {
		tcuo.SetTitle(*s)
	}
	return tcuo
}

// ClearTitle clears the value of the "title" field.
func (tcuo *TelegramChatUpdateOne) ClearTitle() *TelegramChatUpdateOne {
	tcuo.mutation.ClearTitle()
	return tcuo
}

// SetUsername sets the "username" field.
func (tcuo *TelegramChatUpdateOne) SetUsername(s string) *TelegramChatUpdateOne {
	tcuo.mutation.SetUsername(s)
	return tcuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tcuo *TelegramChatUpdateOne) SetNillableUsername(s *string) *TelegramChatUpdateOne {
	if s != nil {
		tcuo.SetUsername(*s)
	}
	return tcuo
}

// ClearUsername clears the value of the "username" field.
func (tcuo *TelegramChatUpdateOne) ClearUsername() *TelegramChatUpdateOne {
	tcuo.mutation.ClearUsername()
	return tcuo
}

// SetIsForum sets the "is_forum" field.
func (tcuo *TelegramChatUpdateOne) SetIsForum(b bool) *TelegramChatUpdateOne {
	tcuo.mutation.SetIsForum(b)
	return tcuo
}

// SetNillableIsForum sets the "is_forum" field if the given value is not nil.
func (tcuo *TelegramChatUpdateOne) SetNillableIsForum(b *bool) *TelegramChatUpdateOne {
	if b != nil {
		tcuo.SetIsForum(*b)
	}
	return tcuo
}

// Mutation returns the TelegramChatMutation object of the builder.
func (tcuo *TelegramChatUpdateOne) Mutation() *TelegramChatMutation {
	return tcuo.mutation
}

// Where appends a list predicates to the TelegramChatUpdate builder.
func (tcuo *TelegramChatUpdateOne) Where(ps ...predicate.TelegramChat) *TelegramChatUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TelegramChatUpdateOne) Select(field string, fields ...string) *TelegramChatUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TelegramChat entity.
func (tcuo *TelegramChatUpdateOne) Save(ctx context.Context) (*TelegramChat, error) {
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TelegramChatUpdateOne) SaveX(ctx context.Context) *TelegramChat {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TelegramChatUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TelegramChatUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcuo *TelegramChatUpdateOne) sqlSave(ctx context.Context) (_node *TelegramChat, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchat.Table, telegramchat.Columns, sqlgraph.NewFieldSpec(telegramchat.FieldID, field.TypeInt64))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramChat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramchat.FieldID)
		for _, f := range fields {
			if !telegramchat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramchat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.GetType(); ok {
		_spec.SetField(telegramchat.FieldType, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.Title(); ok {
		_spec.SetField(telegramchat.FieldTitle, field.TypeString, value)
	}
	if tcuo.mutation.TitleCleared() {
		_spec.ClearField(telegramchat.FieldTitle, field.TypeString)
	}
	if value, ok := tcuo.mutation.Username(); ok {
		_spec.SetField(telegramchat.FieldUsername, field.TypeString, value)
	}
	if tcuo.mutation.UsernameCleared() {
		_spec.ClearField(telegramchat.FieldUsername, field.TypeString)
	}
	if value, ok := tcuo.mutation.IsForum(); ok {
		_spec.SetField(telegramchat.FieldIsForum, field.TypeBool, value)
	}
	_spec.Node.Schema = tcuo.schemaConfig.TelegramChat
	ctx = internal.NewSchemaConfigContext(ctx, tcuo.schemaConfig)
	_node = &TelegramChat{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
