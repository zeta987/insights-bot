// Code generated by ent, DO NOT EDIT.

package telegramchat

import (
	"entgo.io/ent/dialect/sql"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldType, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldTitle, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldUsername, v))
}

// IsForum applies equality check predicate on the "is_forum" field. It's identical to IsForumEQ.
func IsForum(v bool) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldIsForum, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldContainsFold(FieldType, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldContainsFold(FieldTitle, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldContainsFold(FieldUsername, v))
}

// IsForumEQ applies the EQ predicate on the "is_forum" field.
func IsForumEQ(v bool) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldEQ(FieldIsForum, v))
}

// IsForumNEQ applies the NEQ predicate on the "is_forum" field.
func IsForumNEQ(v bool) predicate.TelegramChat {
	return predicate.TelegramChat(sql.FieldNEQ(FieldIsForum, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TelegramChat) predicate.TelegramChat {
	return predicate.TelegramChat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TelegramChat) predicate.TelegramChat {
	return predicate.TelegramChat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TelegramChat) predicate.TelegramChat {
	return predicate.TelegramChat(sql.NotPredicates(p))
}
